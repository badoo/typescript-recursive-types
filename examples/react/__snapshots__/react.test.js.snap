// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Extracts type information from file 1`] = `
Array [
  Object {
    "constructors": Array [
      Object {
        "documentation": "",
        "parameters": Array [
          Object {
            "documentation": "",
            "isOptional": false,
            "name": "props",
            "type": "shape",
            "value": Array [
              Object {
                "documentation": "The type of button",
                "isOptional": true,
                "name": "type",
                "type": "enum",
                "value": Array [
                  Object {
                    "documentation": "",
                    "name": "\\"filled\\"",
                    "type": "string",
                    "value": "\\"filled\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"stroke\\"",
                    "type": "string",
                    "value": "\\"stroke\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"transparent\\"",
                    "type": "string",
                    "value": "\\"transparent\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"semitransparent\\"",
                    "type": "string",
                    "value": "\\"semitransparent\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"monochrome\\"",
                    "type": "string",
                    "value": "\\"monochrome\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"link\\"",
                    "type": "string",
                    "value": "\\"link\\"",
                  },
                ],
              },
              Object {
                "documentation": "If the button should fit the smallest space available (\\"inline\\")",
                "isOptional": true,
                "name": "narrow",
                "type": "boolean",
                "value": "true | false",
              },
              Object {
                "documentation": "Color applied to the button",
                "isOptional": true,
                "name": "color",
                "type": "enum",
                "value": Array [
                  Object {
                    "documentation": "",
                    "name": "false",
                    "type": "boolean",
                    "value": "undefined",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"primary\\"",
                    "type": "string",
                    "value": "\\"primary\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"secondary\\"",
                    "type": "string",
                    "value": "\\"secondary\\"",
                  },
                  Object {
                    "documentation": "",
                    "name": "\\"generic-red\\"",
                    "type": "string",
                    "value": "\\"generic-red\\"",
                  },
                ],
              },
              Object {
                "documentation": "Name of the icon to show inside the button",
                "isOptional": false,
                "name": "icon",
                "type": "enum",
                "value": Array [
                  Object {
                    "documentation": "",
                    "name": "string",
                    "type": "string",
                    "value": "string",
                  },
                  Object {
                    "documentation": "",
                    "name": "number",
                    "type": "string",
                    "value": "number",
                  },
                  Object {
                    "documentation": "",
                    "name": "false",
                    "type": "boolean",
                    "value": "undefined",
                  },
                  Object {
                    "documentation": "",
                    "name": "true",
                    "type": "boolean",
                    "value": "undefined",
                  },
                  Object {
                    "documentation": "",
                    "name": "{}",
                    "type": "shape",
                    "value": Array [],
                  },
                  Object {
                    "documentation": "",
                    "name": "ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>",
                    "type": "enum",
                    "value": Array [
                      Object {
                        "documentation": "",
                        "name": "any",
                        "type": "any",
                        "value": "any",
                      },
                      Object {
                        "documentation": "",
                        "name": "string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)",
                        "type": "enum",
                        "value": Array [
                          Object {
                            "documentation": "",
                            "name": "string",
                            "type": "string",
                            "value": "string",
                          },
                          Object {
                            "documentation": "",
                            "name": "(props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>",
                            "type": "function",
                            "value": Array [
                              Object {
                                "documentation": "",
                                "parameters": Array [
                                  Object {
                                    "documentation": "",
                                    "isOptional": false,
                                    "name": "props",
                                    "type": "any",
                                    "value": "any",
                                  },
                                ],
                                "returnType": "ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>",
                              },
                            ],
                          },
                          Object {
                            "documentation": "",
                            "name": "new (props: any) => Component<any, any, any>",
                            "type": "shape",
                            "value": Array [],
                          },
                        ],
                      },
                    ],
                  },
                  Object {
                    "documentation": "",
                    "name": "ReactNodeArray",
                    "type": "shape",
                    "value": Array [],
                  },
                  Object {
                    "documentation": "",
                    "name": "ReactPortal",
                    "type": "shape",
                    "value": Array [
                      Object {
                        "documentation": "",
                        "isOptional": false,
                        "name": "key",
                        "type": "enum",
                        "value": Array [
                          Object {
                            "documentation": "",
                            "name": "string",
                            "type": "string",
                            "value": "string",
                          },
                          Object {
                            "documentation": "",
                            "name": "number",
                            "type": "string",
                            "value": "number",
                          },
                        ],
                      },
                      Object {
                        "documentation": "",
                        "isOptional": false,
                        "name": "children",
                        "type": "enum",
                        "value": Array [],
                      },
                      Object {
                        "documentation": "",
                        "isOptional": false,
                        "name": "type",
                        "type": "enum",
                        "value": Array [
                          Object {
                            "documentation": "",
                            "name": "string",
                            "type": "string",
                            "value": "string",
                          },
                          Object {
                            "documentation": "",
                            "name": "(props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>",
                            "type": "function",
                            "value": Array [
                              Object {
                                "documentation": "",
                                "parameters": Array [
                                  Object {
                                    "documentation": "",
                                    "isOptional": false,
                                    "name": "props",
                                    "type": "any",
                                    "value": "any",
                                  },
                                ],
                                "returnType": "ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>",
                              },
                            ],
                          },
                          Object {
                            "documentation": "",
                            "name": "new (props: any) => Component<any, any, any>",
                            "type": "shape",
                            "value": Array [],
                          },
                        ],
                      },
                      Object {
                        "documentation": "",
                        "isOptional": false,
                        "name": "props",
                        "type": "any",
                        "value": "any",
                      },
                    ],
                  },
                ],
              },
              Object {
                "documentation": "Text to show inside the button",
                "isOptional": false,
                "name": "text",
                "type": "string",
                "value": "string",
              },
              Object {
                "documentation": "The tag to use to render the button (e.g \\"button\\", \\"a\\", \\"label\\", etc.)",
                "isOptional": false,
                "name": "tag",
                "type": "string",
                "value": "string",
              },
              Object {
                "documentation": "If the button is disabled",
                "isOptional": true,
                "name": "isDisabled",
                "type": "boolean",
                "value": "true | false",
              },
              Object {
                "documentation": "If the button has a \\"pressed\\" visual state (if disabled, is ignored)",
                "isOptional": true,
                "name": "isPressed",
                "type": "boolean",
                "value": "true | false",
              },
              Object {
                "documentation": "Used to overlay a \\"loading\\" state above the content",
                "isOptional": true,
                "name": "isLoading",
                "type": "boolean",
                "value": "true | false",
              },
              Object {
                "documentation": "\\"onClick\\" handler attached to the element",
                "isOptional": false,
                "name": "onClick",
                "type": "function",
                "value": Array [
                  Object {
                    "documentation": "",
                    "parameters": Array [
                      Object {
                        "documentation": "",
                        "isOptional": false,
                        "name": "event",
                        "type": "shape",
                        "value": Array [],
                      },
                    ],
                    "returnType": "boolean",
                  },
                ],
              },
              Object {
                "documentation": "\\"onTouchStart\\" handler attached to the element",
                "isOptional": false,
                "name": "onTouchStart",
                "type": "function",
                "value": Array [
                  Object {
                    "documentation": "",
                    "parameters": Array [],
                    "returnType": "void",
                  },
                ],
              },
              Object {
                "documentation": "\\"onTouchEnd\\" handler attached to the element",
                "isOptional": false,
                "name": "onTouchEnd",
                "type": "function",
                "value": Array [
                  Object {
                    "documentation": "",
                    "parameters": Array [],
                    "returnType": "void",
                  },
                ],
              },
            ],
          },
        ],
        "returnType": "Button",
      },
    ],
    "documentation": "",
    "name": "Button",
    "type": Object {
      "documentation": "",
      "isOptional": false,
      "name": "Button",
      "type": "shape",
      "value": Array [
        Object {
          "documentation": "",
          "isOptional": false,
          "name": "prototype",
          "type": "string",
          "value": "error",
        },
        Object {
          "documentation": "",
          "isOptional": false,
          "name": "defaultProps",
          "type": "shape",
          "value": Array [
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "type",
              "type": "string",
              "value": "string",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "narrow",
              "type": "boolean",
              "value": "true | false",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "color",
              "type": "string",
              "value": "string",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "tag",
              "type": "string",
              "value": "string",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isDisabled",
              "type": "boolean",
              "value": "true | false",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isPressed",
              "type": "boolean",
              "value": "true | false",
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isLoading",
              "type": "boolean",
              "value": "true | false",
            },
          ],
        },
        Object {
          "documentation": "If set, \`this.context\` will be set at runtime to the current value of the given Context.

Usage:

\`\`\`ts
type MyContext = number
const Ctx = React.createContext<MyContext>(0)

class Foo extends React.Component {
   static contextType = Ctx
   context!: React.ContextType<typeof Ctx>
   render () {
     return <>My context's value: {this.context}</>;
   }
}
\`\`\`",
          "isOptional": true,
          "name": "contextType",
          "type": "enum",
          "value": Array [
            Object {
              "documentation": "",
              "name": "any",
              "type": "any",
              "value": "any",
            },
          ],
        },
      ],
    },
  },
]
`;
