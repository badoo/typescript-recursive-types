// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Extracts type information from file 1`] = `
Array [
  Object {
    "constructors": Array [
      Object {
        "documentation": "",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "Props",
            "type": "Props",
            "value": Array [
              Object {
                "documentation": "The type of button",
                "isOptional": false,
                "name": "type",
                "type": "\\"filled\\" | \\"stroke\\" | \\"transparent\\" | \\"semitransparent\\" | \\"monochrome\\" | \\"link\\"",
                "value": Object {
                  "documentation": "",
                  "name": "\\"filled\\" | \\"stroke\\" | \\"transparent\\" | \\"semitransparent\\" | \\"monochrome\\" | \\"link\\"",
                  "type": "enum",
                  "value": Array [
                    Object {
                      "documentation": "",
                      "name": "\\"filled\\"",
                      "type": "string",
                      "value": "\\"filled\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"stroke\\"",
                      "type": "string",
                      "value": "\\"stroke\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"transparent\\"",
                      "type": "string",
                      "value": "\\"transparent\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"semitransparent\\"",
                      "type": "string",
                      "value": "\\"semitransparent\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"monochrome\\"",
                      "type": "string",
                      "value": "\\"monochrome\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"link\\"",
                      "type": "string",
                      "value": "\\"link\\"",
                    },
                  ],
                },
              },
              Object {
                "documentation": "If the button should fit the smallest space available (\\"inline\\")",
                "isOptional": false,
                "name": "narrow",
                "type": "boolean",
                "value": Object {
                  "documentation": "",
                  "name": "boolean",
                  "type": "boolean",
                  "value": "true | false",
                },
              },
              Object {
                "documentation": "Color applied to the button",
                "isOptional": false,
                "name": "color",
                "type": "false | \\"primary\\" | \\"secondary\\" | \\"generic-red\\"",
                "value": Object {
                  "documentation": "",
                  "name": "false | \\"primary\\" | \\"secondary\\" | \\"generic-red\\"",
                  "type": "enum",
                  "value": Array [
                    Object {
                      "documentation": "",
                      "name": "false",
                      "type": "boolean",
                      "value": "undefined",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"primary\\"",
                      "type": "string",
                      "value": "\\"primary\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"secondary\\"",
                      "type": "string",
                      "value": "\\"secondary\\"",
                    },
                    Object {
                      "documentation": "",
                      "name": "\\"generic-red\\"",
                      "type": "string",
                      "value": "\\"generic-red\\"",
                    },
                  ],
                },
              },
              Object {
                "documentation": "Name of the icon to show inside the button",
                "isOptional": false,
                "name": "icon",
                "type": "string",
                "value": Object {
                  "documentation": "",
                  "name": "string",
                  "type": "string",
                  "value": "string",
                },
              },
              Object {
                "documentation": "Text to show inside the button",
                "isOptional": false,
                "name": "text",
                "type": "string",
                "value": Object {
                  "documentation": "",
                  "name": "string",
                  "type": "string",
                  "value": "string",
                },
              },
              Object {
                "documentation": "The tag to use to render the button (e.g \\"button\\", \\"a\\", \\"label\\", etc.)",
                "isOptional": false,
                "name": "tag",
                "type": "string",
                "value": Object {
                  "documentation": "",
                  "name": "string",
                  "type": "string",
                  "value": "string",
                },
              },
              Object {
                "documentation": "If the button is disabled",
                "isOptional": false,
                "name": "isDisabled",
                "type": "boolean",
                "value": Object {
                  "documentation": "",
                  "name": "boolean",
                  "type": "boolean",
                  "value": "true | false",
                },
              },
              Object {
                "documentation": "If the button has a \\"pressed\\" visual state (if disabled, is ignored)",
                "isOptional": false,
                "name": "isPressed",
                "type": "boolean",
                "value": Object {
                  "documentation": "",
                  "name": "boolean",
                  "type": "boolean",
                  "value": "true | false",
                },
              },
              Object {
                "documentation": "Used to overlay a \\"loading\\" state above the content",
                "isOptional": false,
                "name": "isLoading",
                "type": "boolean",
                "value": Object {
                  "documentation": "",
                  "name": "boolean",
                  "type": "boolean",
                  "value": "true | false",
                },
              },
              Object {
                "documentation": "\\"onClick\\" handler attached to the element",
                "isOptional": false,
                "name": "onClick",
                "type": "(event: MouseEvent) => boolean",
                "value": Object {
                  "documentation": "",
                  "name": "(event: MouseEvent) => boolean",
                  "type": "function",
                  "value": Array [
                    Object {
                      "documentation": "",
                      "parameters": Array [
                        Object {
                          "documentation": "",
                          "name": "MouseEvent",
                          "type": "MouseEvent",
                          "value": Array [
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "altKey",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "button",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "buttons",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "clientX",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "clientY",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "ctrlKey",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "metaKey",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "movementX",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "movementY",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "offsetX",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "offsetY",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "pageX",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "pageY",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "relatedTarget",
                              "type": "EventTarget",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "screenX",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "screenY",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "shiftKey",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "x",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "y",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "getModifierState",
                              "type": "(keyArg: string) => boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "initMouseEvent",
                              "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) =>...",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "detail",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "view",
                              "type": "Window",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "which",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
                              "isOptional": false,
                              "name": "bubbles",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "cancelBubble",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.",
                              "isOptional": false,
                              "name": "cancelable",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
                              "isOptional": false,
                              "name": "composed",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the object whose event listener's callback is currently being invoked.",
                              "isOptional": false,
                              "name": "currentTarget",
                              "type": "EventTarget",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.",
                              "isOptional": false,
                              "name": "defaultPrevented",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.",
                              "isOptional": false,
                              "name": "eventPhase",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns true if event was dispatched by the user agent, and false otherwise.",
                              "isOptional": false,
                              "name": "isTrusted",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "returnValue",
                              "type": "boolean",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "srcElement",
                              "type": "EventTarget",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the object to which event is dispatched (its target).",
                              "isOptional": false,
                              "name": "target",
                              "type": "EventTarget",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the event's timestamp as the number of milliseconds measured relative to the time origin.",
                              "isOptional": false,
                              "name": "timeStamp",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the type of event, e.g. \\"click\\", \\"hashchange\\", or \\"submit\\".",
                              "isOptional": false,
                              "name": "type",
                              "type": "string",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \\"closed\\" that are not reachable from event's currentTarget.",
                              "isOptional": false,
                              "name": "composedPath",
                              "type": "() => EventTarget[]",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "initEvent",
                              "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.",
                              "isOptional": false,
                              "name": "preventDefault",
                              "type": "() => void",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.",
                              "isOptional": false,
                              "name": "stopImmediatePropagation",
                              "type": "() => void",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.",
                              "isOptional": false,
                              "name": "stopPropagation",
                              "type": "() => void",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "AT_TARGET",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "BUBBLING_PHASE",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "CAPTURING_PHASE",
                              "type": "number",
                              "value": Array [],
                            },
                            Object {
                              "documentation": "",
                              "isOptional": false,
                              "name": "NONE",
                              "type": "number",
                              "value": Array [],
                            },
                          ],
                        },
                      ],
                      "returnType": "boolean",
                    },
                  ],
                },
              },
              Object {
                "documentation": "\\"onTouchStart\\" handler attached to the element",
                "isOptional": false,
                "name": "onTouchStart",
                "type": "() => void",
                "value": Object {
                  "documentation": "",
                  "name": "() => void",
                  "type": "function",
                  "value": Array [
                    Object {
                      "documentation": "",
                      "parameters": Array [],
                      "returnType": "void",
                    },
                  ],
                },
              },
              Object {
                "documentation": "\\"onTouchEnd\\" handler attached to the element",
                "isOptional": false,
                "name": "onTouchEnd",
                "type": "() => void",
                "value": Object {
                  "documentation": "",
                  "name": "() => void",
                  "type": "function",
                  "value": Array [
                    Object {
                      "documentation": "",
                      "parameters": Array [],
                      "returnType": "void",
                    },
                  ],
                },
              },
            ],
          },
        ],
        "returnType": "Button",
      },
    ],
    "documentation": "",
    "name": "Button",
    "type": Object {
      "documentation": "",
      "name": "typeof Button",
      "type": "typeof Button",
      "value": Array [
        Object {
          "documentation": "",
          "isOptional": false,
          "name": "defaultProps",
          "type": "{ type: string; narrow: boolean; color: string; tag: string; isDisabled: boolean; isPressed: boolean; isLoading: boolean; }",
          "value": Array [
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "type",
              "type": "string",
              "value": Object {
                "documentation": "",
                "name": "string",
                "type": "string",
                "value": "string",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "narrow",
              "type": "boolean",
              "value": Object {
                "documentation": "",
                "name": "boolean",
                "type": "boolean",
                "value": "true | false",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "color",
              "type": "string",
              "value": Object {
                "documentation": "",
                "name": "string",
                "type": "string",
                "value": "string",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "tag",
              "type": "string",
              "value": Object {
                "documentation": "",
                "name": "string",
                "type": "string",
                "value": "string",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isDisabled",
              "type": "boolean",
              "value": Object {
                "documentation": "",
                "name": "boolean",
                "type": "boolean",
                "value": "true | false",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isPressed",
              "type": "boolean",
              "value": Object {
                "documentation": "",
                "name": "boolean",
                "type": "boolean",
                "value": "true | false",
              },
            },
            Object {
              "documentation": "",
              "isOptional": false,
              "name": "isLoading",
              "type": "boolean",
              "value": Object {
                "documentation": "",
                "name": "boolean",
                "type": "boolean",
                "value": "true | false",
              },
            },
          ],
        },
        Object {
          "documentation": "If set, \`this.context\` will be set at runtime to the current value of the given Context.

Usage:

\`\`\`ts
type MyContext = number
const Ctx = React.createContext<MyContext>(0)

class Foo extends React.Component {
   static contextType = Ctx
   context!: React.ContextType<typeof Ctx>
   render () {
     return <>My context's value: {this.context}</>;
   }
}
\`\`\`",
          "isOptional": true,
          "name": "contextType",
          "type": "Context<any>",
          "value": Object {
            "documentation": "",
            "name": "Context<any>",
            "type": "enum",
            "value": Array [
              Object {
                "documentation": "",
                "name": "any",
                "type": "any",
                "value": "any",
              },
            ],
          },
        },
      ],
    },
  },
]
`;
